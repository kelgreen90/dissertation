// =========================
// 1. Load Data
// =========================

// Load AOI asset
var aoi = ee.FeatureCollection('projects/vvb-dissertation/assets/VVBM_buffer15');

// Load park boundaries for mask
var parksVector = ee.FeatureCollection('projects/vvb-dissertation/assets/parks_mask_MGNP');

// =========================
// 2. Cloud/Shadow Masking for Landsat C2 SR
// =========================
function maskLandsatC2SR(image) {
  var qa = image.select('QA_PIXEL');
  var cloudShadowBitMask = (1 << 4);
  var cloudsBitMask = (1 << 3);
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
               .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return image.updateMask(mask);
}

// =========================
// 3. Composite for 2024
// =========================
function getLandsatComposite(area) {
  var startDate = ee.Date('2024-01-01');
  var endDate = ee.Date('2024-12-31');

  var l9 = ee.ImageCollection('LANDSAT/LC09/C02/T1_L2') // Landsat 9 (since 2021)
            .filterDate(startDate, endDate)
            .filterBounds(area)
            .map(maskLandsatC2SR);

  return l9.median().clip(area);
}

var image = getLandsatComposite(aoi);

// Load the SRTM DEM and calculate slope
var dem = ee.Image('USGS/SRTMGL1_003');
var slope = ee.Terrain.slope(dem).rename('Slope');

// =========================
// 4. Calculate Indices and Add to Image
// =========================

var viirs = ee.ImageCollection('NOAA/VIIRS/DNB/MONTHLY_V1/VCMSLCFG');
var viirsComposite = viirs.filterDate('2024-01-01', '2024-12-31')
                          .mean()
                          .select('avg_rad')
                          .rename('NightLights')
                          .clip(aoi);

var evi = image.expression(
  '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))',
  {
    'NIR': image.select('SR_B5'),
    'RED': image.select('SR_B4'),
    'BLUE': image.select('SR_B2')
  }
).rename('EVI');

var ndbi = image.normalizedDifference(['SR_B6', 'SR_B5']).rename('NDBI');
var ndvi = image.normalizedDifference(['SR_B5', 'SR_B4']).rename('NDVI');
var ndmi = image.normalizedDifference(['SR_B5', 'SR_B6']).rename('NDMI');
var nbr = image.normalizedDifference(['SR_B5', 'SR_B7']).rename('NBR');
var lights = viirsComposite.clip(aoi);

// Add all indices and slope as bands to the image
var imageWithIndices = image
  .addBands(evi)
  .addBands(ndvi)
  .addBands(ndmi)
  .addBands(nbr)
  .addBands(slope)
  .addBands(viirsComposite)
  .addBands(ndbi);

// =========================
// 5. Band Selection
// =========================
var bands = [
  'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7',
  'EVI', 'NDVI', 'NDMI', 'NBR', 'Slope', 'NightLights', 'NDBI'
];

// =========================
// 6. Split into Training and Testing Sets (80/20)
// =========================
var trainingSet = ee.FeatureCollection('projects/vvb-dissertation/assets/train_80');
var testingSet  = ee.FeatureCollection('projects/vvb-dissertation/assets/test_20');

// =========================
// 7. Sample Image with Training Set
// =========================
var trainingSamples = imageWithIndices.select(bands).sampleRegions({
  collection: trainingSet,
  properties: ['class'],
  scale: 30,
  tileScale: 2
});

// =========================
// 8. Train Random Forest Classifier
// =========================
var classifier = ee.Classifier.smileRandomForest(500).train({
  features: trainingSamples,
  classProperty: 'class',
  inputProperties: bands
});

// =========================
// 9. Classify the Image
// =========================
var classified = imageWithIndices.select(bands).classify(classifier); 

// =========================
// 10. Post-processing Reclassification
// =========================

// --- A. Reclassify Water on Steep Slopes as Barren (class 7) ---
var slopeThreshold = 1;
var waterMask = classified.eq(6);
var steepMask = slope.gt(slopeThreshold);
var waterOnSteepSlopes = waterMask.and(steepMask);
var correctedWater = classified.where(waterOnSteepSlopes, 7);

// --- B. Reclassify Cropland and Urban as Barren within PAs ---
var parks_mask = ee.Image.constant(0) // convert to raster
  .byte()
  .paint({
    featureCollection: parksVector,
    color: 1
  })
  .rename('parks_mask')
  .clip(aoi);
var croplandMask = correctedWater.eq(2);
var urbanMask2 = correctedWater.eq(5);
var humanInParks = (croplandMask.or(urbanMask2)).and(parks_mask.eq(1));
var finalClassified = correctedWater.where(humanInParks, 7);

// --- C. Clip the final classified image to AOI ---
var finalClassifiedClipped = finalClassified.clip(aoi);

// =========================
// 11. Display Results
// =========================
var visParams = {
  min: 1,
  max: 7,
  palette: [
    '#006400', // 1 Forest
    '#C8A2C8', // 2 Agriculture
    '#FCBA03', // 3 Shrubland
    '#FFFF00', // 4 Grassland
    '#E30000', // 5 Urban
    '#3A06C9', // 6 Water
    '#808080'  // 7 Barren
  ]
};

Map.centerObject(aoi, 10);
Map.addLayer(finalClassifiedClipped, visParams, 'LCC 2024');

// =========================
// 12. Accuracy Assessment
// =========================
var testingSamples = imageWithIndices.select(bands).sampleRegions({
  collection: testingSet,
  properties: ['class'],
  scale: 30,
  tileScale: 2
});

var testClassification = testingSamples.classify(classifier);

var confusionMatrix = testClassification.errorMatrix('class', 'classification');
print('Confusion Matrix:', confusionMatrix);
print('Overall Accuracy:', confusionMatrix.accuracy());
print('Kappa Coefficient:', confusionMatrix.kappa());

var classifiedTestingPoints = testingSamples.classify(classifier);
print(classifiedTestingPoints.limit(10));
Export.table.toDrive({
  collection: classifiedTestingPoints,
  description: 'Classified_Testing_Points_Export',
  fileFormat: 'CSV'
});

// =========================
// 13. Export to Assets
// =========================
Export.image.toAsset({
  image: finalClassifiedClipped,
  description: 'LCC2024_Export',
  assetId: 'LCC_2024_v',
  region: aoi.geometry(),
  scale: 30,
  maxPixels: 1e13
});
