// =========================
// 1. Load Data
// =========================

// Load AOI asset
var aoi = ee.FeatureCollection('projects/vvb-dissertation/assets/VVBM_buffer15');

// Load the SRTM DEM and calculate slope
var dem = ee.Image('USGS/SRTMGL1_003');
var slope = ee.Terrain.slope(dem).rename('Slope');

// Load park boundaries for mask
var parksVector = ee.FeatureCollection('projects/vvb-dissertation/assets/parks_mask');

// =========================
// Cloud Mask
// =========================
function maskLandsatC2SR(image) {
  var qa = image.select('QA_PIXEL');
  var cloudShadowBitMask = (1 << 4);
  var cloudsBitMask = (1 << 3);
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
               .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return image.updateMask(mask);
}

// =========================
// Multi-Year Composite for 2003
// =========================
function getLandsatComposite(area) {
  var startDate = ee.Date('2002-05-01');
  var endDate = ee.Date('2003-05-15');

  var l7 = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2')
            .filterDate(startDate, endDate)
            .filterBounds(area)
            .map(maskLandsatC2SR);

  return l7.median().clip(area);
}

var image = getLandsatComposite(aoi);


// =========================
// 2. Calculate Indices and Add to Image
// =========================

// NDVI: Normalized Difference Vegetation Index (NIR - RED) / (NIR + RED)
var ndvi = image.normalizedDifference(['SR_B4', 'SR_B3']).rename('NDVI');  // B4 = NIR, B3 = Red

// NDMI: Normalized Difference Moisture Index (NIR - SWIR1) / (NIR + SWIR1)
var ndmi = image.normalizedDifference(['SR_B4', 'SR_B5']).rename('NDMI');  // B5 = SWIR1

// NBR: Normalized Burn Ratio (NIR - SWIR2) / (NIR + SWIR2)
var nbr = image.normalizedDifference(['SR_B4', 'SR_B7']).rename('NBR');   // B7 = SWIR2

// NDBI: Normalized Difference Built-up Index (SWIR1 - NIR) / (SWIR1 + NIR)
var ndbi = image.normalizedDifference(['SR_B5', 'SR_B4']).rename('NDBI');  // B5 = SWIR1, B4 = NIR

// UI: Urban Index (NDBI - NDVI)
var ui = ndbi.subtract(ndvi).rename('UI');

// EVI: Enhanced Vegetation Index
var evi = image.expression(
  '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
    'NIR': image.select('SR_B4'),   // B4 = NIR
    'RED': image.select('SR_B3'),   // B3 = Red
    'BLUE': image.select('SR_B1')   // B1 = Blue
  }).rename('EVI');

// Defense Meteorological Satellite Program (DMSP-OLS) 1km replacement for NTL 1992-2013
var dmsp = ee.ImageCollection('NOAA/DMSP-OLS/NIGHTTIME_LIGHTS')
  .filter(ee.Filter.calendarRange(2003, 2003, 'year'))
  .select('stable_lights')
  .mean()
  .rename('NightLights'); 

// Select SWIR1 band (SR_B4) and scale to int16
var swir1_int = image.select('SR_B4')
  .multiply(0.0001)       // Optional: rescale reflectance if needed
  .multiply(1000)         // Scale up to meaningful 0â€“1000 range
  .toInt16();             // Convert to 16-bit int

// Apply GLCM texture
var glcm = swir1_int.glcmTexture({size: 3});
var texture = glcm.select('SR_B4_contrast').rename('Texture');

// Add all indices and slope as bands to the image
var imageWithIndices = image
  .addBands(ndvi)
  .addBands(ndmi)
  .addBands(nbr)
  .addBands(slope)
  .addBands(ndbi)
  .addBands(ui)
  .addBands(texture)
  .addBands(evi)
  .addBands(dmsp);

// =========================
// 3. Band Selection
// =========================
var bands = [
  'SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'NDVI', 'NDMI', 'NBR', 'Slope', 'NDBI', 'UI', 'Texture', 'EVI', 'NightLights'
];

// =========================
// 4. Split into Training and Testing Sets (80/20)
// =========================
var trainingSet = ee.FeatureCollection('projects/vvb-dissertation/assets/train_80');
var testingSet  = ee.FeatureCollection('projects/vvb-dissertation/assets/test_20');

// =========================
// 5. Sample Image with Training Set
// =========================
var trainingSamples = imageWithIndices.select(bands).sampleRegions({
  collection: trainingSet,
  properties: ['class'],
  scale: 30,
  tileScale: 2
});

// =========================
// 6. Train Random Forest Classifier
// =========================
var classifier = ee.Classifier.smileRandomForest(500).train({
  features: trainingSamples,
  classProperty: 'class',
  inputProperties: bands
});

// =========================
// 7. Classify the Image
// =========================
var classified = imageWithIndices.select(bands).classify(classifier);

// =========================
// 8. Post-processing: Fix Water on Steep Slopes & Change within PAs
// =========================

// --- A. Reclassify Water on Steep Slopes as Barren (class 7) ---
var slopeThreshold = 1;
var waterMask = classified.eq(6);
var steepMask = slope.gt(slopeThreshold);
var waterOnSteepSlopes = waterMask.and(steepMask);
var correctedWater = classified.where(waterOnSteepSlopes, 7);

// -- B. Reclassify Cropland and Urban as Barren within PAs (excl. Mgahinga) ---
var parks_mask = ee.Image.constant(0) // convert to raster
  .byte()
  .paint({
    featureCollection: parksVector,
    color: 1
  })
  .rename('parks_mask')
  .clip(aoi);
var croplandMask = correctedWater.eq(2);
var urbanMask2 = correctedWater.eq(5);
var humanInParks = (croplandMask.or(urbanMask2)).and(parks_mask.eq(1));
var finalClassified = correctedWater.where(humanInParks, 7);

// --- C. Clip the final classified image to AOI ---
var finalClassifiedClipped = finalClassified.clip(aoi);

// =========================
// 9. Display Results
// =========================
var visParams = {
  min: 1,
  max: 7,
  palette: [
    '#006400', // 1 Forest
    '#C8A2C8', // 2 Agriculture
    '#FCBA03', // 3 Shrubland
    '#FFFF00', // 4 Grassland
    '#E30000', // 5 Urban
    '#3A06C9', // 6 Water
    '#808080'  // 7 Barren
  ]
};

Map.centerObject(aoi, 10);
Map.addLayer(finalClassifiedClipped, visParams, 'LCC 2003');

// =========================
// 10. Accuracy Assessment
// =========================
var testingSamples = imageWithIndices.select(bands).sampleRegions({
  collection: testingSet,
  properties: ['class'],
  scale: 30,
  tileScale: 2
});

var testClassification = testingSamples.classify(classifier);

var confusionMatrix = testClassification.errorMatrix('class', 'classification');
print('Confusion Matrix:', confusionMatrix);
print('Overall Accuracy:', confusionMatrix.accuracy());
print('Kappa Coefficient:', confusionMatrix.kappa());

var classifiedTestingPoints = testingSamples.classify(classifier);
print(classifiedTestingPoints.limit(10));
Export.table.toDrive({
  collection: classifiedTestingPoints,
  description: 'Classified_Testing_Points_Export',
  fileFormat: 'CSV'
});

// =========================
// 11. Export to Assets
// =========================
Export.image.toAsset({
  image: finalClassifiedClipped,
  description: 'LandCoverClassification2003_Export',
  assetId: 'LCC_2003_v',
  region: aoi.geometry(),
  scale: 30,
  maxPixels: 1e13
});
